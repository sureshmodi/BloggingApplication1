package org.cisco.cmad.BloggingApp.Rest;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.ws.rs.Consumes;
import javax.ws.rs.CookieParam;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.GenericEntity;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;
import static javax.ws.rs.core.HttpHeaders.*;

import org.cisco.cmad.BloggingApp.Database.JPABlogAppDAO;
import org.cisco.cmad.BloggingApp.api.BlogPost;
import org.cisco.cmad.BloggingApp.api.BlogPostEntity;
import org.cisco.cmad.BloggingApp.api.BlogPostList;
import org.cisco.cmad.BloggingApp.api.BlogUser;
import org.cisco.cmad.BloggingApp.api.Comments;
import org.cisco.cmad.BloggingApp.api.CommentsList;
import org.cisco.cmad.BloggingApp.api.ErrorMsg;
import org.cisco.cmad.BloggingApp.api.InvalidUserCredentialsException;
import org.cisco.cmad.BloggingApp.api.JWTAuthentication;
import org.cisco.cmad.BloggingApp.api.UserDetails;
import org.cisco.cmad.BloggingApp.jwt.JWTImpl;
import org.cisco.cmad.BloggingApp.service.CmadBlogPost;
import org.cisco.cmad.BloggingApp.service.CmadBlogUser;

@Path("blogging")
public class BlogRestController {
	
	private static BlogUser bloguser = new CmadBlogUser();
	private static BlogPost blogpost = new CmadBlogPost();
	private static JWTAuthentication jwtauth = new JWTImpl();
	
	@POST
	@Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Path("/user/register")
	public Response addUser(UserDetails user) throws Exception {
			
				bloguser.createUser(user);
				return Response.status(Status.CREATED).entity(user).build();
			   
	
	}
	
	@POST
	@Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Path("/blogpost/userid/{userid}")
	public Response createBlogpost(BlogPostEntity recvblogpost, @PathParam("userid") String userid,
								   @Context UriInfo uriinfo)
	
	{
				
			    BlogPostEntity blogpostdb = blogpost.createBlogpost(recvblogpost, userid);
			    String id = String.valueOf(blogpostdb.getBlogpostid());
			    //URI uri = uriinfo.getAbsolutePathBuilder().path(id).build();
			    URI uri = uriinfo.getBaseUriBuilder()
			    		  .path(BlogRestController.class)
			    		  .path("blogpost").path(id).build();
			    
			    blogpostdb.addLinks(uri, recvblogpost.getBlogpostid());
				return Response.created(uri).entity(blogpostdb).build();
			    
			   
	
	}
	
	
	@POST
	@Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
    @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Path("/blogpost/{postid}/postcomment")
	
    public Response postComment(@PathParam("postid") String postid,Comments comment) {
		
		Comments dbcomments = blogpost.postComments(comment,postid);
		return Response.status(Status.CREATED).entity(dbcomments).build();
    }
	
	@GET
	@Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Path("/blogpost/{blogpostid}")
	public Response getBlogpost(@PathParam("blogpostid") String blogpostid,@Context UriInfo uriinfo) {
		
		BlogPostEntity blog = blogpost.getBlogpost(blogpostid);
			
		if(blog!=null) {
			URI uri = uriinfo.getAbsolutePathBuilder().build();
			blog.addLinks(uri,"Blog Comments");
			return Response.status(Status.OK).entity(blog).build();
			
		} else {
			return Response.status(Status.NOT_FOUND).build();
		}
		
		
	}
	
	@POST
	@Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})

	@Path("/user/login")
	public Response userLogin(UserDetails user,@Context UriInfo uriinfo) {
			
		UserDetails userdb = null;
		ErrorMsg errormsg= new ErrorMsg();
		//String authorization = "Authorization";
				
		if (user.getUserid()!=null && user.getPassword()!=null) {
			userdb = bloguser.userLogin(user);
			
															
			for (String blogid : userdb.getBlogids()) {
						URI uri = uriinfo.getBaseUriBuilder().path(BlogRestController.class)
									.path("blogpost")
									.path(blogid)
									.build();
						userdb.addLinks(uri,blogid);
			}
			
			String token = jwtauth.generateJwtToken(user.getUserid(),uriinfo.getAbsolutePath().toString(),user.getUserid(),1000000);
			System.out.println("Suresh: Generated Token: "+token);
				       									
			return Response.status(Status.OK).entity(userdb).header(AUTHORIZATION,token).build();
			//return Response.status(Status.OK).entity(userdb).header(SET_COOKIE,token).build();
			
						
		} else {
			System.out.println("Suresh: Inside userlogin method");
			errormsg.setErrormsg("UserID/Password is empty");
			errormsg.setErrorcode(400);
			return Response.status(Status.BAD_REQUEST).entity(errormsg).build();	
		}
							   
	
	}
	
	@PUT
	@Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Path("/user/{userid}/update")

	public Response updateUser(UserDetails user,@Context HttpHeaders headers,@PathParam("userid") String userid) {
	
		 	if (user != null) {
		 		 		 		  				
		 		  MultivaluedMap<String,String> headervalues = headers.getRequestHeaders();
		 		  String jwttoken = null;
		 		  
		 		  try {
		 			  jwttoken = headervalues.get(AUTHORIZATION).get(0);
		 		  	  System.out.println("Suresh: Authorization header value: "+jwttoken);
		 			  
		 		  } catch (NullPointerException e) {
		 			  throw new InvalidUserCredentialsException("No Authorization header present in HTTP Request");
		 		  }	  
		 		 
		 		   jwtauth.parseJwtToken(u, jwttoken);		 		   
		 		   UserDetails userdb = bloguser.updateUser(user);
				
		 		   if (userdb != null) {
		 		 	  	return Response.status(Status.OK).entity(userdb).build();
		 		   } else {
		 		  		  	return Response.status(Status.NOT_MODIFIED).build();
		 		   }
		 		 
		 		  
		 	} else {
		 		    System.out.println("Suresh: Invalid user details");
		 			return Response.status(Status.BAD_REQUEST).build();
		 	}
	}
	
	@GET
	@Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Path("/blogpost/{blogpostid}/comments")
	
	public Response getallComments(@PathParam("blogpostid") String blogpostid) {
		
		List<Comments> commentslist = blogpost.getallComments(blogpostid);
		 		 			
	 	System.out.print("Size of the comments list: "+commentslist.size()+"\n");
		for(int i=0;i < commentslist.size();i++) {
			
			System.out.println("Comments: "+commentslist.get(i).getComment());
		}
		
		CommentsList commlist = new CommentsList();
		commlist.setCommentsList(commentslist);
			
		return Response.status(Status.OK).entity(commlist).build();
		
	}
	
	@DELETE
	@Produces({MediaType.TEXT_PLAIN,MediaType.APPLICATION_JSON})
	@Path("/blogpost/{blogpostid}")
	public Response deleteBlogpost(@PathParam("blogpostid") String blogpostid) {
			
			blogpost.deleteBlogpost(blogpostid);
			return Response.status(Status.OK).entity("Successfully deleted").build();
			
	}
	
	@GET
	@Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Path("/blogpost/all")
	public Response getallBlogposts(@Context UriInfo uriinfo) {
		
		List<Object[]> dbbloglist = blogpost.getallBlogPosts();
			
		if(dbbloglist!=null) {
			//URI uri = uriinfo.getAbsolutePathBuilder().path("comments").build();
			//blog.addLinks(uri,"Blog Comments");
			
			BlogPostList bloglist = new BlogPostList();
			//bloglist.setBloglist(dbbloglist);
			
			
			for (int i=0;i<dbbloglist.size();i++) {
				URI uri = uriinfo.getBaseUriBuilder().path(BlogRestController.class)
							.path("blogpost")
							.path((String) dbbloglist.get(i)[0])
							.build();
				
				bloglist.addLinks((String) dbbloglist.get(i)[1],uri);
			}	
		
			return Response.status(Status.OK).entity(bloglist).build();
			
		} else {
			return Response.status(Status.NOT_FOUND).build();
		}
		
		
	}

	@GET
	@Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})

	@Path("/user/{userid}/home")
	public Response userDetails(@PathParam("userid") String userid,@Context UriInfo uriinfo,@Context HttpHeaders headers) {
			
		UserDetails userdb = null;
		ErrorMsg errormsg= new ErrorMsg();
				
		if (userid!=null) {
			
			 MultivaluedMap<String,String> headervalues = headers.getRequestHeaders();
	 		 String jwttoken = null;
	 		  
	 		  try {
	 			  System.out.println("Suresh: Authorization header value: "+headervalues.get(AUTHORIZATION).get(0));
	 		  
	 			  jwttoken = headervalues.get(AUTHORIZATION).get(0);
	 		  
	 			  System.out.println("Suresh: Authorization header value: "+jwttoken);
	 			  
	 		  } catch (NullPointerException e) {
	 			  throw new InvalidUserCredentialsException("No Authorization header present in HTTP Request");
	 		  }	  
	 		 
	 		  //Authenticating user
	 		  jwtauth.parseJwtToken(userid, jwttoken);
	 		
	 		  userdb = bloguser.getUserDetails(userid);
	 		
			 for (String blogid: userdb.getBlogids()) {
						URI uri = uriinfo.getBaseUriBuilder().path(BlogRestController.class)
									.path("blogpost")
									.path(blogid)
									.build();
						userdb.addLinks(uri,blogid);
			 }
						
			 return Response.status(Status.OK).entity(userdb).build();
						
		 } else {
			errormsg.setErrormsg("UserID is empty");
			errormsg.setErrorcode(400);
			return Response.status(Status.BAD_REQUEST).entity(errormsg).build();	
		}
							   
	
	}
	
	@POST
	//@Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML})
	@Produces({MediaType.TEXT_PLAIN,MediaType.APPLICATION_JSON})

	@Path("/user/{userid}/logout")
	public Response userLogout(@PathParam("userid") String userid, @Context UriInfo uriinfo,
		   @CookieParam(value = "Cookie") Cookie cookie, @Context HttpHeaders headers) {
			
		MultivaluedMap<String,String> headervalues = headers.getRequestHeaders();
		ErrorMsg errormsg= new ErrorMsg();
				
		try {
			  //System.out.println("Suresh: Cookie header value: "+headervalues.get(COOKIE).get(0));
		  
			  String jwttoken = headervalues.get(AUTHORIZATION).get(0);
		  
			  System.out.println("Suresh: Authorization header value: "+jwttoken);
			  
		  } catch (NullPointerException e) {
			  throw new InvalidUserCredentialsException("No Authorization header present in HTTP Request");
		  }	 
				
		if (userid!=null) {
			try {
				jwtauth.deleteJwtToken(userid);
				System.out.println("Suresh: received cookie "+cookie);
				return Response.status(Status.OK).entity("User Successfully logged out").header(SET_COOKIE,null).build();
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("Caught Exception:"+e.toString());
				return Response.status(Status.OK).entity("User Successfully logged out").header(SET_COOKIE,null).build();
			}	
						
		} else {
			System.out.println("Suresh: Inside userlogout method");
			/*errormsg.setErrormsg("UserID is empty");
			errormsg.setErrorcode(400);
			return Response.status(Status.BAD_REQUEST).entity(errormsg).build();	*/
			return Response.status(Status.BAD_REQUEST).entity("Bad Request").build();
			
		}
							   
	
	}
	
}
