package org.cisco.cmad.BloggingApp.service;

import java.net.URI;
import java.util.Set;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.cisco.cmad.BloggingApp.Database.BlogPostDAOInf;
import org.cisco.cmad.BloggingApp.Database.CommentsDAOInf;
import org.cisco.cmad.BloggingApp.Database.JPABlogAppDAO;
import org.cisco.cmad.BloggingApp.Database.MongoDBDAOImpl;
import org.cisco.cmad.BloggingApp.Database.UserDAOInf;
import org.cisco.cmad.BloggingApp.Rest.BlogRestController;
import org.cisco.cmad.BloggingApp.Rest.Errormsg;
import org.cisco.cmad.BloggingApp.api.BlogPostNotFoundException;
import org.cisco.cmad.BloggingApp.api.BlogUser;
import org.cisco.cmad.BloggingApp.api.InvalidUserCredentialsException;
import org.cisco.cmad.BloggingApp.api.UserAlreadyExistsException;
import org.cisco.cmad.BloggingApp.api.UserDetails;
import org.cisco.cmad.BloggingApp.api.UserNotFoundException;
import org.cisco.cmad.BloggingApp.api.UserRegistrationFailedException;
import org.cisco.cmad.BloggingApp.api.UserUpdateFailedException;
import org.cisco.cmad.BloggingApp.jwt.JWTImpl;
import org.glassfish.jersey.internal.util.ExceptionUtils;

import com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException;

import io.jsonwebtoken.SignatureException;

public class CmadBlogUser implements BlogUser{

	private UserDAOInf userdao = new MongoDBDAOImpl();
		
	@Override
	public void createUser(UserDetails user) {
		
		try {
			userdao.createUser(user);
			user.setPassword("xxx");
		} catch (Exception e) {
			// TODO: handle exception
		}  catch (Exception ex) {
			
			System.out.println("Suresh,Caught Exception: "+ex.toString());
			
			Throwable th = ex.getCause();
			
			if (th!=null) {
					while(th.getCause().getCause() != null) {
						th = th.getCause();	
					}	
			}
			
			if(th != null && th.getCause() !=null ) {
				System.out.println("Suresh: root cause: "+th.getCause());
				System.out.println("Suresh: message: "+th.getCause().getMessage());
			
				if(th.getCause() instanceof MySQLIntegrityConstraintViolationException || 
						th.getCause() instanceof com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException) {
					throw new UserAlreadyExistsException("User "+user.getUserid()+" already exists");
				} else {
					throw new UserRegistrationFailedException(ex.getMessage());
				}
			}	
			
		}	
		
	    
		
	}

	@Override
	public UserDetails userLogin(UserDetails user) {
		
		UserDetails userdb = null;
		System.out.println("Received Userid:"+user.getUserid());
		
		userdb = userdao.retreiveUser(user.getUserid());
		
		if (userdb != null) {
			
			if ((user.getPassword().equals(userdb.getPassword()))) {
				userdb.setPassword("xxxxxxx");
				return userdb;
				
			} else {
				System.out.println("Suresh: Invalid userid/password");
				throw new InvalidUserCredentialsException("Invalid userid/password");
				
			}		
		} else {
			System.out.println("Suresh: Uknown user");
			throw new UserNotFoundException("Unknown User");
		}
			
		
	}

	@Override
	public UserDetails updateUser(UserDetails user,String jwttoken) {
		
		JWTImpl jwt = new JWTImpl();
	
		try {
			jwt.parseJWT(user.getUserid(),jwttoken);
			System.out.println("Token Authorization Successful");
			UserDetails userdb = null;
			userdb = userdao.updateProfile(user);
			return userdb;
		} catch (SignatureException e) {
			e.printStackTrace();
			throw new InvalidUserCredentialsException("Invalid Token");
		
		} catch (Exception e) {
			e.printStackTrace();
			throw new UserUpdateFailedException("Unauthorized User");
		}
				
	}

	@Override
	public UserDetails getUserDetails(String userid) {
		
		UserDetails userdb = null;
				
		userdb = userdao.retreiveUser(userid);
		
		if (userdb != null) {
			
			return userdb;
						
		} else {
			System.out.println("Suresh: Uknown user");
			throw new UserNotFoundException("Unknown User");
		}
	}
	
	
}
